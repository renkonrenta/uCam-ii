//*************************************************************************************************//
//* [main.cpp]                                                                                    *//
//* ・同期動作を行う 	                                                                          *//
//*                                                                                               *//
//*                                                                                               *//
//*                                                                                               *//
//*                                                          [ (c)2017/08/31 Renta.Yamamoto ]     *//        
//*************************************************************************************************//


//-- [ヘッダファイル] -------------------------------------------------------------------------//
#include "ucam.h"
//---------------------------------------------------------------------------------------------//


//-- [プロトタイプ宣言] -----------------------------------------------------------------------//
int main(int, char **);
//---------------------------------------------------------------------------------------------//


//-- [メイン関数] -----------------------------------------------------------------------------//
//- int main(int argc, char *argv[])							      -//
//- 機能   : メインのプログラム処理を行う						      -//
//- 引数   : (int)    コマンドライン引数の数					              -//
//-          (char *) コマンドライン引数						      -//
//- 戻り値 : (int)    -								              -//
//---------------------------------------------------------------------------------------------//
int main(int argc, char *argv[])
{
    
    //-- [変数宣言] -----------------------------------------------------------------------//

    unsigned char ucam_receive_data[UCAM_DATA_SIZE];							// 受信データ格納配列
    int file_handle;											// ファイルハンドル格納変数
    int ucam_data_size;											// データサイズ格納変数
    int mode;												// モード格納変数
    int ucam_responce;											// レスポンス値格納変数
    struct termios oldtio;										// シリアルポート初期設定格納構造体
    struct termios newtio;										// シリアルポート新規設定格納構造体
    struct sigaction sig;										// シグナル設定格納構造体
    struct timeval timeout;										// タイムアウト設定格納構造体
    fd_set readfds;											// read用FD構造体
    fd_set readfds_init;										// read初期化用FD構造体
    
    //-------------------------------------------------------------------------------------//
    
    
    //-- [初期化] -------------------------------------------------------------------------//

    file_handle     = 0;                                                                                // ファイルハンドル格納変数初期化
    mode            = 0;										// モード格納変数初期化
    ucam_data_size  = 6;										// データサイズ格納変数初期化
    ucam_responce   = 0;									        // レスポンス値格納変数
    timeout.tv_sec  = 0;										// タイムアウト設定 [sec]
    timeout.tv_usec = 0;										// タイムアウト設定 [msec]
    message_display(PROGRAM_START);									// メッセージ表示	

    //-------------------------------------------------------------------------------------//

    
    //-- [シリアル/シグナル初期化] --------------------------------------------------------//

    signal_init(&sig);											// シグナル初期化

    if((file_handle = serial_init(&oldtio, &newtio)) < 0){						// シリアルポートオープン

        message_display(SERIAL_PORT_OPEN_FALSE);							// メッセージ表示
        return -1;											// 異常終了

    }

   message_display(SERIAL_PORT_OPEN);									// メッセージ表示
   
   //--------------------------------------------------------------------------------------//


   //-- [select初期化] --------------------------------------------------------------------//

   FD_ZERO(&readfds_init);										// 初期化用FD構造体初期化
   FD_SET(file_handle, &readfds_init);									// ファイルディスクリプタ登録

   //--------------------------------------------------------------------------------------//

   

   //-- [メインループ] --------------------------------------------------------------------//

   while(signal_flag == OFF){										// シグナルフラグ確認

       
       //-- [送信処理] ----------------------------------------------------------------//
       
       switch(mode){											// modeチェック

           case 0:											// 同期コマンド

               //-- [同期コマンド送信] --------------------------------------------//

               if(ucam_sync_command(file_handle) < 0){							// 同期コマンド送信

	          message_display(UCAM_SYNC_SEND_FALSE);						// メッセージ表示
                  signal_flag = ON;									// フラグオン	
                  break;										// ブレイク

               }

               message_display(UCAM_SYNC_SEND);								// メッセージ表示
               break;											// ブレイク

               //------------------------------------------------------------------//

           case 1:

               //- [同期ACKコマンド送信] ------------------------------------------//

               if(ucam_ack_command(file_handle, 0x0D) < 0){						// 同期コマンド送信

	          message_display(UCAM_ACK_SEND_FALSE);							// メッセージ表示
                  signal_flag = ON;									// フラグオン	
                  break;										// ブレイク

               }

               message_display(UCAM_ACK_SEND);								// メッセージ表示
               signal_flag = ON;									// フラグオン	
               break;											// ブレイク	

               //------------------------------------------------------------------//										// ブレイク

           default:											// デフォルト
               break;											// ブレイク
          
       }

       //------------------------------------------------------------------------------//


       //-- [select処理] --------------------------------------------------------------//

       memcpy(&readfds, &readfds_init, sizeof(fd_set));							// FD構造体コピー
       select(FD_SETSIZE, &readfds, NULL, NULL, &timeout);       					// ファイルハンドル監視

       //------------------------------------------------------------------------------//


       //-- [受信処理] ----------------------------------------------------------------//

       if(FD_ISSET(file_handle, &readfds)){

           if((ucam_responce = read(file_handle, ucam_receive_data, ucam_data_size)) < 0){
       
               printf("[ uCam-ii ]");                
               printf("[ file read error               ]");
               printf("[ error number = %d                      ]\n",ucam_responce);
               signal_flag = ON;                                   
               break;       

           }

           if(ucam_responce > 0){ 

               switch(mode){

	           //-- [同期ACKコマンド受信] -----------------------------------------//

                   case 0:
                       receive_ack_message(ucam_receive_data);
                       mode = 1;
                       break;

                   //------------------------------------------------------------------//
           
                   default:
                       break;

               }

           }

       }

       //----------------------------------------------------------------------------------//


       //-- [待機処理] --------------------------------------------------------------------//
       
       usleep(SLEEP_TIME);

       //----------------------------------------------------------------------------------//


   }


   //-- [終了処理] ------------------------------------------------------------------------//

   serial_finish(file_handle, &oldtio);									// シリアルポートクローズ
   message_display(SERIAL_PORT_CLOSE);									// メッセージ表示
   message_display(PROGRAM_FINISH);

   //--------------------------------------------------------------------------------------//


   return 1;												// 正常終了
  
}
//---------------------------------------------------------------------------------------------//
