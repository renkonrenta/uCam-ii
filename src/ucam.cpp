//*************************************************************************************************//
//* [ucam.cpp]  									          *//
//* 　4dsystem製のカメラモジュール(Cam-ii)を使用するために用いる関数群を記述する                  *//
//*       	  										  *//
//*                                                                                               *//
//*                                                            [ (c)2017/08/25 Renta_Yamamamoto ] *//
//*************************************************************************************************//


//-- [ヘッダファイル] -------------------------------------------------------------------------//
#include "ucam.h"											// ucam.h読み込み
//---------------------------------------------------------------------------------------------//


//-- [変数宣言] -------------------------------------------------------------------------------//
int signal_flag = OFF;
//---------------------------------------------------------------------------------------------//


//-- [メッセージ表示関数] ---------------------------------------------------------------------//
//- void message_display(int message_number)                                                  -//
//- 機能  : メッセージの表示を行う			 			      	　    -//
//- 引数  : (int)  メッセージ番号                        			      　　　　-//
//- 戻り値: (void) なし        			         			              -//
//---------------------------------------------------------------------------------------------//
void message_display(int message_number)
{

    //-- [メッセージ表示処理] -------------------------------------------------------------//

    switch(message_number){										// メッセージ番号確認
	
	case PROGRAM_START:										// プログラム開始
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Program Start                 ]");						// 文字画面出力
            printf("[----------------------------------------]\n");					// 文字画面出力
            break;											// ブレイク

	case PROGRAM_FINISH:										// プログラム終了
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Program finish                ]");						// 文字画面出力
            printf("[----------------------------------------]\n");					// 文字画面出力
            break;											// ブレイク

        case SERIAL_PORT_OPEN:										// シリアルポートオープン
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Serial port open              ]");						// 文字画面出力
            printf("[----------------------------------------]\n");					// 文字画面出力
            break;											// ブレイク

        case SERIAL_PORT_OPEN_FALSE:									// シリアルポートオープン失敗
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Serial port open false        ]");     						// 文字画面出力
            printf("[----------------------------------------]\n");					// 文字画面出力
            break;											// ブレイク
            
        case SERIAL_PORT_CLOSE:										// シリアルポートクローズ
	    printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Serial_port_close             ]");						// 文字画面出力
            printf("[----------------------------------------]\n");					// 文字画面出力
            break;											// ブレイク

        case UCAM_SYNC_SEND:										// SYNC送信
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Sync command send             ]");						// 文字画面出力
            printf("[ Personal computer -> uCam-ii           ]\n");					// 文字画面出力
            break;            										// ブレイク

        case UCAM_SYNC_SEND_FALSE:									// SYNC送信失敗
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Sync command send false       ]");						// 文字画面出力
            printf("[ Personal computer +> uCam-ii           ]\n");					// 文字画面出力
            break;											// ブレイク
 
       case UCAM_ACK_SEND:										// SYNC送信
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Ack command send              ]");						// 文字画面出力
            printf("[ Personal computer -> uCam-ii           ]\n");					// 文字画面出力
            break;            										// ブレイク

        case UCAM_ACK_SEND_FALSE:									// SYNC送信失敗
            printf("[ uCam-ii ]");									// 文字画面出力
            printf("[ Ack command send false       ]");					 		// 文字画面出力
            printf("[ Personal computer +> uCam-ii           ]\n");					// 文字画面出力
            break;											// ブレイク


        default:											// デフォルト
            break;											// ブレイク

    }

    //-------------------------------------------------------------------------------------//


    return;												// 正常終了

}


//-- [受信ACKコマンド表示関数] ----------------------------------------------------------------//
//- void receive_ack_message(unsigned char *receive_data)                                     -//
//- 機能  : 受信ACKコマンドの表示を行う			 			      	　    -//
//- 引数  : (unsigned char *)  受信データ先頭ポインタ             		      　　　　-//
//- 戻り値: (void) なし        			         			              -//
//---------------------------------------------------------------------------------------------//
void receive_ack_message(unsigned char *receive_data)
{

    //-- [変数宣言] -----------------------------------------------------------------------//

    unsigned char receive_command_data[5];								// 受信データ格納配列
    short int i;											// カウンタ格納変数

    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    receive_command_data[0] = 0;									// 受信データ格納配列初期化
    receive_command_data[1] = 0;									// 受信データ格納配列初期化
    receive_command_data[2] = 0;									// 受信データ格納配列初期化
    receive_command_data[3] = 0;									// 受信データ格納配列初期化
    receive_command_data[4] = 0;									// 受信データ格納配列初期化
    receive_command_data[5] = 0;									// 受信データ格納配列初期化
    i = 0;												// カウンタ格納変数初期化

    //-------------------------------------------------------------------------------------//


    //-- [受信コマンド格納] ---------------------------------------------------------------//

    for(i=0; i<6; i++)
        receive_command_data[i] = receive_data[i];							// 受信データ格納

    //-------------------------------------------------------------------------------------//


    //-- [メッセージ表示処理] -------------------------------------------------------------//

    switch(receive_command_data[2]){    

        case 0x0d:											// Sync ack	
    	    printf("[ uCam-ii ]");								        // 文字画面出力
    	    printf("[ Sync command ack receive      ]");						// 文字画面出力
            printf("[ personal computer <- uCam-ii           ]\n");					// 文字画面出力
	    break;											// ブレイク
        
        default:											// デフォルト
            break;											// ブレイク
    }

    //-------------------------------------------------------------------------------------//


    return;												// 正常終了

}
//---------------------------------------------------------------------------------------------//


//-- [受信コマンド表示関数] -------------------------------------------------------------------//
//- void receive_command_message(unsigned char *receive_data)                                 -//
//- 機能  : 受信コマンドの表示を行う			 			      	　    -//
//- 引数  : (unsigned char *)  受信データ先頭ポインタ             		      　　　　-//
//- 戻り値: (void) なし        			         			              -//
//---------------------------------------------------------------------------------------------//
void receive_command_message(unsigned char *receive_data)
{

    //-- [変数宣言] -----------------------------------------------------------------------//

    unsigned char receive_command_data[5];								// 受信データ格納配列
    short int i;											// カウンタ格納変数

    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    receive_command_data[0] = 0;									// 受信データ格納配列初期化
    receive_command_data[1] = 0;									// 受信データ格納配列初期化
    receive_command_data[2] = 0;									// 受信データ格納配列初期化
    receive_command_data[3] = 0;									// 受信データ格納配列初期化
    receive_command_data[4] = 0;									// 受信データ格納配列初期化
    receive_command_data[5] = 0;									// 受信データ格納配列初期化
    i = 0;												// カウンタ格納変数初期化

    //-------------------------------------------------------------------------------------//


    //-- [受信コマンド格納] ---------------------------------------------------------------//

    for(i=0; i<6; i++)
        receive_command_data[i] = receive_data[i];							// 受信データ格納

    //-------------------------------------------------------------------------------------//


    //-- [メッセージ表示処理] -------------------------------------------------------------//

    printf("[ uCam-ii ]");										// 文字画面出力
    printf("[ 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x ]",
           receive_command_data[0], receive_command_data[1], receive_command_data[2],
           receive_command_data[3], receive_command_data[4], receive_command_data[5]);			// 文字画面出力
    printf("[ personal computer <- uCam-ii           ]\n");						// 文字画面出力

    //-------------------------------------------------------------------------------------//


    return;												// 正常終了

}
//---------------------------------------------------------------------------------------------//

//-- [シグナル初期化関数] ---------------------------------------------------------------------//
//- void signal_init(struct sigaction *sig)                                                   -//
//- 機能  : シグナルの初期化を行う			 			      	　    -//
//- 引数  : (struct sigaction *) シグナル受信時動作構造体格納ポインタ                         -//
//- 戻り値: (void)               なし			         			      -//
//---------------------------------------------------------------------------------------------//
void signal_init(struct sigaction *sig)
{

    //-- [シグナルハンドル登録] -----------------------------------------------------------//

    sig->sa_handler = signal_handler;									// シグナルハンドル登録
    sig->sa_flags   = 0;                                                                                // シグナルハンドル動作変更なし

    //-------------------------------------------------------------------------------------//


    //-- [シグナルアクション設定] ---------------------------------------------------------//

    sigaction(SIGINT, sig, NULL);									// キーボード割り込み設定

    //-------------------------------------------------------------------------------------//


    return;												// 正常終了

}
//---------------------------------------------------------------------------------------------//


//-- [シグナル処理関数] -----------------------------------------------------------------------//
//- void signal_handler(int statas)                                                           -//
//- 機能  : シグナル処理を行う			 			      		　  　-//
//- 引数  : (int)      シグナル          					              -//
//- 戻り値: (void)     なし			               			              -//
//---------------------------------------------------------------------------------------------//
void signal_handler(int statas)
{
    
    //-- [シグナル処理] -------------------------------------------------------------------//

    signal_flag = ON;											// シグナルフラグオン   

    //-------------------------------------------------------------------------------------//


    return;												// 正常終了

}
//---------------------------------------------------------------------------------------------//

//-- [シリアルポート初期化関数] ---------------------------------------------------------------//
//- int serial_init(struct termios *oldtio, struct termios *newtio)     		      -//
//- 機能  : シリアルポートの初期化を行う			 			      -//
//- 引数  : (struct *) 初期ポート設定格納ポインタ 					      -//
//-         (struct *) 新規ポート設定格納ポインタ    					      -//
//- 戻り値: (int) ファイルハンドル							      -//
//---------------------------------------------------------------------------------------------//
int serial_init(struct termios *oldtio, struct termios *newtio)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    int file_handle; 

    //-------------------------------------------------------------------------------------//

    
    //-- [シリアルポートオープン] ---------------------------------------------------------//
    //-											  -//
    //- [アクセスモード]								  -//
    //- O_RDONLY       : 読み込み専用							  -//
    //- O_WRONLY       : 書き込み専用							  -//
    //- O_RDWR         : 読み書き用							  -//
    //-											  -//
    //- [ファイル作成フラグ]                                                              -//
    //- O_CLOEXEC      : close-on-exexフラグを有効にする                                  -//
    //-                : close-on-exec... execvpを行ったあとでファイルハンドルの状態を維持-//
    //- O_CREAT        : ファイルが存在しなかった場合作成する                             -//
    //- O_DIRECTORY    : ディレクトリでなければ失敗					  -//
    //- O_EXCL         : O_CREATと使うことでファイルが存在した場合にopen()を失敗させる    -//
    //- O_NOCTTY       : 制御端末にしない						  -//
    //- O_NOFOLLOW     : pathnameがシンボリックリンクだった場合,open()を失敗させる        -//
    //- O_TMPFILE      : 名前なしの一時ファイルを作成する　O_RDWR,O_WRONLYのどちらかと併用-//
    //- O_TRUNC        : 指定されたファイルが存在する場合,ファイル長を0にする		  -//
    //- 									          -//
    //- [ファイル状態フラグ]							          -//
    //- O_APPEND       : ファイルを追加モードでオープンする(ファイルを消さずに書き込み)   -//
    //- O_ASYNC        : 入力,出力が可能になった場合にシグナルを生成する	          -//
    //- O_DIRECT       : IOキャッシュ最小化　O_SYNCも併用で使用しなければならない	  -//
    //- O_DSYNC        : ファイルに対する書き込みは同期IOのデータ完全性完了要件に基づく	  -//
    //- O_NOATIME      : read()されたとき最終アクセス時間を更新しない			  -//
    //- O_NONBLOCK     : 可能ならば非停止モードでオープンする				  -//
    //- O_NDELAY       : 上に同じ                               		          -//
    //-											  -//
    //-------------------------------------------------------------------------------------//
    file_handle = open(DEVICE_NAME, O_RDWR | O_NOCTTY | O_NONBLOCK);					// ファイルオープン
    if(file_handle < 0) return -1;									// 異常終了 [-1]


    //-- [設定待避] -----------------------------------------------------------------------//
    
    tcgetattr(file_handle, oldtio);									// 初期シリアルポート設定退避

    //-------------------------------------------------------------------------------------//


    //-- [新規シリアルポート初期化] -------------------------------------------------------//

    memset(newtio, 0 , sizeof(*newtio));								// 新規シリアルポート初期化

    //-------------------------------------------------------------------------------------//


    //-- [c_cfrag設定] --------------------------------------------------------------------//
    //-											  -//
    //- CBAUD  : ボーレートのマスク							  -//
    //- CLOCAL : モデムの制御線を無視する (非同期式シリアル?)				  -//
    //- CREAD  : 文字の受信を可能にする							  -//
    //- CS     : CS5,CS6,CS7,CS8とあり,CS後の数字で文字サイズを設定する			  -//
    //- CSTOPB : ストップビットを2にする,そうでなければ1				  -//
    //- CRTSCTS: ハードウェアフロー制御を有効にする					  -//
    //- HUPCL  : クローズ時にもモデムを切断する						  -//
    //- PARENB : パリティの生成と検出を有効にする					  -//
    //- PARODD : 偶数パリティではなく奇数パリティを使用する				  -//
    //- 									          -//
    //-------------------------------------------------------------------------------------//
    
    newtio->c_cflag = (BAUDRATE | CS8 | CLOCAL | CREAD);						// 新規ポート設定
    
    //-------------------------------------------------------------------------------------//


    //-- [c_iflag設定] --------------------------------------------------------------------//
    //-                                    						  -//
    //- BRKINT : IGKBRG設定時は無視,BREAK信号によって入出力をフラッシュ			  -//
    //- IGKBRK : 入力中のBREAK信号を無視する						  -//
    //- IGNPAR : フレームエラー,パリティーエラーを無視					  -//
    //- PARMRK : IGNPARが設定されていない場合,フレームエラーとパリティエラー発生時,\377\0 -//
    //-          を付加									  -//
    //- INPCK  : 入力のパリティチェックを有効にする					  -//
    //- ISTRIP : 8ビット目を落とす							  -//
    //- INLCR  : 入力のNL(改行)をCR(復帰文字)に置き換える		                  -//	
    //- IGNCR  : 入力のCR(復帰文字)を無視する						  -//
    //- INRNC  : (IGNCRが設定されていない場合)入力のCR(復帰文字)をNL(改行文字)に置き換える-//
    //- IUCLC  : (POSIXにはない)入力の大文字を小文字に置き換える			  -//
    //- IXON   : 出力のXON/XOFF フロー制御を有効にする					  -//
    //- IXANY  : (XSI)任意の文字を入力すると,停止していた出力を再開する			  -//
    //- IXOFF  : 入力のXON/XOFFフロー制御を有効にする					  -//
    //- IUTF8  : 入力がUTF8である						          -//
    //-------------------------------------------------------------------------------------//

    newtio->c_iflag = IGNPAR;										// 新規ポート設定

    //-------------------------------------------------------------------------------------//


    //-- [c_oflag設定] --------------------------------------------------------------------//
    //-                                                                                   -//
    //- OPOST  : 実装に依存した出力処理を有効にする 				          -//
    //- OLCUC  : 出力時に小文字を大文字に変換する					  -//
    //- ONLCR  : (XSI) 出力のNLをCR-NLに置き換える					  -//
    //- ONRNL  : 出力のCRをNLに置き換える					          -//
    //- ONOCR  : 0桁目でCRを出力しない 							  -//
    //- ONLRET : CRを出力しない								  -//
    //- OFILL  : 転送時間を遅らせるのではなく,補填文字を送る				  -//
    //- NLDLY  : NLの遅延を設定する							  -//
    //- CRDLY  : CRの遅延を設定する							  -//
    //- TABDLY : 水平タブの遅延を設定する						  -//
    //- BSDLY  : backspaceの遅延を設定する						  -//
    //- VTDLY  : 垂直タブの遅延を設定する						  -//
    //- FFDLY  : 頁送りの遅延を設定する							  -//
    //-											  -//
    //-------------------------------------------------------------------------------------//

    newtio->c_oflag = 0;										// 新規ポート設定

    //-------------------------------------------------------------------------------------//


    //-- [c_lflag設定] --------------------------------------------------------------------//
    //-        										  -//
    //- ISIG   : INTR, QUIT, SUSP, DSUSPの文字を受信した時,対応するシグナルを発生させる   -//
    //- ICANON : カノニカルモードを有効にする						  -//
    //- ECHO   : 入力された文字をエコーする						  -//
    //- ECHOE  : ICANONも同時に設定された場合,ERASE文字は文字を制御し,WERASE文字は前の単語-//
    //-          を削除する								  -//
    //- ECHOK  : ICANONも同時に設定された場合,KILL文字は現在の行を削除する		  -//
    //- ECHONL : ICANONも同時に設定された場合,ECHOが設定されてなくてもNL文字をエコーする  -//
    //- ECHOCTL: ECHO も同時に設定された場合、TAB, NL, START, STOP 以外の 端末特殊文字が  -//
    //         : ^X としてエコーされる。					          -//
    //- ECHOPRT: ICANON および ECHO が同時に設定されている場合、 削除された文字も表示され -//
    //-          る							                  -//
    //- ECHOKE : ICANON も設定された場合、 KILL が行の各文字を消去する代わりにエコーされる-//
    //- FLUSHO : 出力をフラッシュする							  -//
    //- NOFLSH : INT, QUIT, SUSP 文字に対応するシグナルを発生する際の 入力・出力キューの  -//
    //-          フラッシュを無効にする。						  -//
    //- TOSTOP : バックグラウンドプロセスのプロセスグループで制御端末へ 文字を出力しよう  -//
    //           としているプロセスに対して SIGTTOU シグナルを送る。		          -//
    //- PENDIN : 次の文字を読み込んだ時、入力キュー中の全文字を再表示する		  -//
    //- IEXTEN : 実装依存の入力処理を有効にする                                           -//
    //- 										  -//
    //-------------------------------------------------------------------------------------//

    newtio->c_lflag = 0;										// 新規ポート設定

    //-------------------------------------------------------------------------------------//


    //-- [読み込み設定] -------------------------------------------------------------------//

    newtio->c_cc[VMIN]  = 1;										// 読み込み最小文字数設定
    newtio->c_cc[VTIME] = 0;										// タイムアウトしない

    //-------------------------------------------------------------------------------------//


    //-- [データフラッシュ] ---------------------------------------------------------------//
    //-											  -//
    //- TCIFLUSH  : 入力データフラッシュ						  -//
    //- TCOFLUSH  : 出力データフラッシュ						  -//
    //- TCIOFLUSH : 入出力データフラッシュ						  -//
    //-											  -//
    //-------------------------------------------------------------------------------------//

    tcflush(file_handle, TCIFLUSH);									// 受信データ破棄

    //-------------------------------------------------------------------------------------//


    //-- [新規ポート設定反映] -------------------------------------------------------------//
    //-                                                                                   -//
    //- TCSANOW   : 値を直ちに変更                                                        -//
    //- TCSADRAIN : 現在の出力が完了した後に変更                                          -//
    //- TCSAFLUSH : 現在の出力が完了した後に値を変更するが,現在利用可能な入力のうち、read -//
    //-             の呼び出しで返されていないものはすべて破棄する                        -//
    //-                                                                                   -//
    //-------------------------------------------------------------------------------------//

    tcsetattr(file_handle, TCSANOW, newtio);									// 設定反映

    //-------------------------------------------------------------------------------------//


    return file_handle;											// 戻り値 [ファイルハンド]
    
}


//-- [シリアルポート終了関数] -----------------------------------------------------------------//
//- void serial_finish(int file_handle, struct termios *oldtio)     		              -//
//- 機能  : シリアルポートの終了処理を行う			 			      -//
//- 引数  : (int)      ファイルハンドル 					              -//
//-         (struct *) 初期ポート設定格納ポインタ    					      -//
//- 戻り値: (void)     なし							              -//
//---------------------------------------------------------------------------------------------//
void serial_finish(int file_handle, struct termios *oldtio)
{

    //-- [設定復帰] -----------------------------------------------------------------------//

    tcsetattr(file_handle, TCSANOW, oldtio);								// 初期設定復帰

    //-------------------------------------------------------------------------------------//


    //-- [シリアルポートクローズ] ---------------------------------------------------------//

    close(file_handle);											// シリアルポートクローズ

    //-------------------------------------------------------------------------------------//

   
    return;												// 正常終了
}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_初期化コマンド送信関数] ---------------------------------------------------------//
//- int ucam_init_command(int file_handle) 					              -//
//- 機能  : 初期化コマンドを送信する					 		      -//
//- 引数  : (int) ファイルハンドル 							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_init_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列

    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;										// 送信データ初期化
    send_data[1] = 0x01;										// 送信データ初期化
    send_data[2] = INITAL_PARAM1;									// 送信データ初期化
    send_data[3] = INITAL_PARAM2;									// 送信データ初期化
    send_data[4] = INITAL_PARAM3;									// 送信データ初期化
    send_data[5] = INITAL_PARAM4;									// 送信データ初期化

    //-------------------------------------------------------------------------------------//

	
    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;							// コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]
	
}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_写真取得コマンド送信関数] -------------------------------------------------------//
//- int ucam_getpic_command(int file_handle)						      -//
//- 機能  : 写真取得コマンドを送信する							      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_getpic_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列

    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;										// 送信データ初期化
    send_data[1] = 0x04;										// 送信データ初期化
    send_data[2] = GETPICTURE_PARAM1;									// 送信データ初期化
    send_data[3] = GETPICTURE_PARAM2;									// 送信データ初期化
    send_data[4] = GETPICTURE_PARAM3;									// 送信データ初期化
    send_data[5] = GETPICTURE_PARAM4;									// 送信データ初期化

    //-------------------------------------------------------------------------------------//

	
    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;							// コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//
	

//-- [uCam-ii_スナップショットコマンド送信関数] -----------------------------------------------//
//- int ucam_snapshot_command(int file_handle)						      -//
//- 機能  : スナップショットコマンドを送信する 						      -//
//- 引数  : (int) ファイルハンドル						              -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_snapshot_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列

    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//
 
    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x05;                                                                                // 送信データ初期化
    send_data[2] = SNAPSHOT_PARAM1;                                                                     // 送信データ初期化
    send_data[3] = SNAPSHOT_PARAM2;                                                                     // 送信データ初期化
    send_data[4] = SNAPSHOT_PARAM3;                                                                     // 送信データ初期化
    send_data[5] = SNAPSHOT_PARAM4;                                                                     // 送信データ初期化

    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_パッケージサイズ設定コマンド送信関数] -------------------------------------------//
//- int ucam_pkgsize_command(int file_handle)                                                 -//
//- 機能  : パッケージサイズ設定コマンドを送信する 					      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_pkgsize_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x06;                                                                                // 送信データ初期化
    send_data[2] = SETPACKAGESIZE_PARAM1;                                                               // 送信データ初期化
    send_data[3] = SETPACKAGESIZE_PARAM2;                                                               // 送信データ初期化
    send_data[4] = SETPACKAGESIZE_PARAM3;                                                               // 送信データ初期化
    send_data[5] = SETPACKAGESIZE_PARAM4;                                                               // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_ボーレート設定コマンド送信関数] -------------------------------------------------//
//- int ucam_baudrate_command(int file_handle)                                                -//
//- 機能  : ボーレート設定コマンドを送信する						      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_baudrate_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x07;                                                                                // 送信データ初期化
    send_data[2] = SETBAUDRATE_PARAM1;                                                                  // 送信データ初期化
    send_data[3] = SETBAUDRATE_PARAM2;                                                                  // 送信データ初期化
    send_data[4] = SETBAUDRATE_PARAM3;                                                                  // 送信データ初期化
    send_data[5] = SETBAUDRATE_PARAM4;                                                                  // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_リセットコマンド送信関数] -------------------------------------------------------//
//- int ucam_reset_command(int file_handle)						      -//
//- 機能  : リセットコマンドを送信する							      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_reset_command(int file_handle)
{

    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x08;                                                                                // 送信データ初期化
    send_data[2] = RESET_PARAM1;                	                                                // 送信データ初期化
    send_data[3] = RESET_PARAM2;        	                                                        // 送信データ初期化
    send_data[4] = RESET_PARAM3; 	                                                                // 送信データ初期化
    send_data[5] = RESET_PARAM4;                        	                                        // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_同期コマンド送信関数] -----------------------------------------------------------//
//- int ucam_sync_command(int file_handle)		                                      -//
//- 機能  : 同期コマンドを送信する							      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_sync_command(int file_handle)
{
 
    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x0D;                                                                                // 送信データ初期化
    send_data[2] = SYNC_PARAM1;                	        	                                        // 送信データ初期化
    send_data[3] = SYNC_PARAM2;        	                        	                                // 送信データ初期化
    send_data[4] = SYNC_PARAM3; 	                                                                // 送信データ初期化
    send_data[5] = SYNC_PARAM4;                    	    	                                        // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//

//-- [uCam-ii_ACKコマンド送信関数] ------------------------------------------------------------//
//- int ucam_ack_command(int file_handle, int command_id)		　　　　　　　　　　　-//
//- 機能  : ACKコマンドを送信する          						      -//
//- 引数  : (int) ファイルハンドル							      -//
//-         (int) コマンドID								      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_ack_command(int file_handle, int command_id)
{
 
    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x0E;                                                                                // 送信データ初期化
    send_data[2] = command_id;                	        	                                        // 送信データ初期化
    send_data[3] = 0x00;      	  	                        	                                // 送信データ初期化
    send_data[4] = 0x00; 		                                                                // 送信データ初期化
    send_data[5] = 0x00;                	    	    	                                        // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//
 
    if(write(file_handle, send_data, 6) < 0) return -1;                                                  // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//


//-- [uCam-ii_LIGHTコマンド送信関数] ----------------------------------------------------------//
//- int ucam_ligth_command(int file_handle)						      -//
//- 機能  : LIGHTコマンドを送信する							      -//
//- 引数  : (int) ファイルハンドル							      -//
//- 戻り値: (int) 終了状態								      -//
//---------------------------------------------------------------------------------------------//
int ucam_light_command(int file_handle)
{
 
    //-- [変数定義] -----------------------------------------------------------------------//

    unsigned char send_data[5];										// 送信データ格納配列
	
    //-------------------------------------------------------------------------------------//


    //-- [初期化] -------------------------------------------------------------------------//

    send_data[0] = 0xAA;                                                                                // 送信データ初期化
    send_data[1] = 0x13;                                                                                // 送信データ初期化
    send_data[2] = LIGHT_PARAM1;                	                                                // 送信データ初期化
    send_data[3] = LIGHT_PARAM2;        	                       	                                // 送信データ初期化
    send_data[4] = LIGHT_PARAM3; 	                                                                // 送信データ初期化
    send_data[5] = LIGHT_PARAM4;                    	    	                                        // 送信データ初期化
													
    //-------------------------------------------------------------------------------------//


    //-- [コマンド送信] -------------------------------------------------------------------//

    if(write(file_handle, send_data, 6) < 0) return -1;                                                 // コマンド送信/エラー検出

    //-------------------------------------------------------------------------------------//


    return 0;												// 正常終了 [0]

}
//---------------------------------------------------------------------------------------------//
